//找尋比Input還要大一點的排序
//那從後面開始往前找，找到第一個遞增的地方，那只要找那個位子後面比較大一點的數替換，並排序
//就會是答案
//  1,2,3,7,4,6,5
//  --------^----
//要比上面1237465還要大一點的數子會是1237546，從右邊看，5後面已經沒有數字跟可以跟他換，
//6後面只有5跟他換的話會導致整體變小，跟前面換確實會整體數字變大，但不會是最靠近目前數子的
//接下來看到4，跟後面的5或6交換都會使整體變大，但我們現在要找的是變大一點，如果選6不符合，
//因為選5也是變大且是最靠近的，所以會選到5。
//而選4也不需要去比對後面到底有沒有比4大的數，只需判斷是否為升階就行，找到第一個就會是我們的目標
//因只要有升階的情況就代表著後面還有數字交換能變大如完全沒有升階的話，
//依題目來說直接全部倒過來即是答案
//而後面排序也不用全部排序，因為已知一定會是遞減的順序，所以只需要顛倒過來就會是從小排到大


void nextPermutation(int* nums, int numsSize){
    int curr = -1;
    
    for(int i = numsSize - 1; i > 0; i--){
        if(nums[i-1] < nums[i]){
            curr = i - 1; 
            break;
        }
    }

    if(curr == -1){
        for(int i = 0; i <= numsSize - 1 - i; i++){
            int temp = nums[i];
            nums[i] = nums[numsSize - 1 - i];
            nums[numsSize - 1 - i] = temp;
        }    
    }
    else{
        int gap = -1, index = -1, swap = -1;
        for(int i = curr + 1, j = numsSize - 1; i < numsSize; i++, j--){
            if(i <= j){
                swap = nums[i];
                nums[i] = nums[j];
                nums[j] = swap;
            }
            
            if(nums[i] - nums[curr] > 0 && (nums[i] - nums[curr] < gap || gap == -1)){
                index = i;
                gap = nums[i] - nums[curr];
            }
        }
        swap = nums[index];
        nums[index] = nums[curr];
        nums[curr] = swap;
    }
    

    return nums;
}
