

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** creat_array(int n, int** returnColumnSizes){
    *returnColumnSizes = (int*)calloc(n, sizeof(int));
    int **ptr = (int**)calloc(n, sizeof(int*));
    int *temp = (int*)calloc(n * n, sizeof(int));
    
    for(int i = 0; i < n; i++, temp += n){
        returnColumnSizes[0][i] = n;
        ptr[i] = temp;
    }
    
    
    return ptr;
}

// void free_array(int **ptr){
//     free(ptr[0]);
//     free(ptr);
//     return;
// }

//O(n*n)
//      x = 0, y = n - 1            x = 1, y = n - 2
//[      x      ][  x ~ y  ]    [      x      ][  x ~ y  ]  left to right
//[(x+1) ~   y  ][    y    ]    [(x+1) ~   y  ][    y    ]  top to bottom
//[      y      ][(y-1) ~ x]    [      y      ][(y-1) ~ x]  right to left
//[(y-1) ~ (x+1)][    x    ]    [(y-1) ~ (x+1)][    x    ]  bottom to top
//依此類推，只需要更改x跟y的值，就會由外到內螺旋走完,總共走了n*n
int** generateMatrix(int n, int* returnSize, int** returnColumnSizes){
    *returnSize = n;
    
    int **result = creat_array(n, returnColumnSizes);
    int count = 1;
    int x = 0, y = n-1;
    
    for( ; count <=  n * n; x++, y--){
        
        //left to right
        for(int i = x; i <= x; i++){
            for(int j = x; j <= y; j++){
                result[i][j] = count++;
            }
        }
        
        //top to bottom
        for(int i = x + 1; i <= y; i++){
            for(int j = y; j <= y; j++){
                result[i][j] = count++;
            }
        }
        
        //right to left
        for(int i = y; i >= y; i--){
            for(int j = y - 1; j >= x; j--){
                result[i][j] = count++;
            }
        }
        
        //bottom to top
        for(int i = y - 1; i >= x + 1; i--){
            for(int j = x; j >= x; j--){
                result[i][j] = count++;
            }
        }
    }
    
    
    return result;
}
