

//matrixSize = n, matrixColSize = m , O(n + logm)
// bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){
//     if(target > matrix[matrixSize - 1][(*matrixColSize) - 1])
//         return false;
    
//     int row = 0;
    
//     for(int i = 0; i < matrixSize; i++){
//         if(target > matrix[i][0])
//             row = i;
//         else if(target == matrix[i][0])
//             return true;
//         else
//             break;
//     }
    
//     int left = 0, right = (*matrixColSize) - 1;
//     int mid = 0;
//     while(left <= right){
//         mid = (left + right) / 2;
        
//         if(matrix[row][mid] == target)
//             return true;
//         else if(matrix[row][mid] > target)
//             right = mid - 1;
//         else
//             left = mid + 1;
//     }
    

//     return false;
// }

//O(log(n*m))
bool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){    
    if(target > matrix[matrixSize - 1][(*matrixColSize) - 1])
        return false;
    
    int left = 0, right = ((*matrixColSize) * matrixSize ) - 1;  
    while(left <= right){
        int mid = (left + right) / 2;
        int row = mid / (*matrixColSize);
        int col = mid % (*matrixColSize);
        
        if(matrix[row][col] == target){
            return true;
        }
        else if(matrix[row][col] > target){
            right = mid - 1;
        }
        else{
            left = mid + 1;
        }  
    }
    
    
    return false;    
}
