

// bool search(int* nums, int numsSize, int target){    
    
//     for(int i = 0; i < numsSize; i++)
//         if(target == nums[i])
//             return true;
    
    
//     return false;
// }

bool search(int* nums, int numsSize, int target){

    if(abs(nums[0] - target) < abs(nums[numsSize-1] - target)){
        for(int i = 0; i < numsSize; i++)
            if(target == nums[i])
                return true;
    }
    else{
        for(int i = numsSize - 1; i >= 0; i--)
            if(target == nums[i])
                return true;
        
    }
    
    return false;
}

/****other people's do****/
// bool search(int* nums, int numsSize, int target){
//     int r = numsSize-1, l=0, mid = r/2;
//     while (l <= r)
//     {
//         mid = l+(r-l)/2;
//         if ((l == r) && (nums[l] != target)) //target wasn't found
//             return false;

//         if ((target == nums[mid]) || (target == nums[l]) || (target == nums[r])) // target found
//             return true;
        
//         if ((target >= nums[r]) && (target < nums[mid])) //target on left side
//             r = mid-1;
 
//         else if ((target <= nums[l]) && (target > nums[mid])) //target on right side
//             l = mid+1;

//         else if ((target <= nums[l])||(target >= nums[r])) //otherwise
//         {
//             if (nums[mid] <= nums[r])
//             {
//                 r-=1;
//                 l+=1;
//             }
//             else
//                 l = mid+1;
//         }
//         else //regular binary search
//         {
//             if (target < nums[mid])
//                 r = mid-1;
//             else if (target > nums[mid])
//                 l = mid+1;
//         }
//     }
//     return false;
// }



