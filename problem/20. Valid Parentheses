

bool isValid(char * s){
    
    int length = strlen(s);
    if(length % 2 != 0)
        return false;
    
    int head = 0, tail = length-1;
    char compar_array1[length/2+1], compar_array2[length/2+1];
    int i = 0;
    int h_count = 0, t_count = 0;
    while(head < tail){
        
        switch(s[head++]){
            case '{' :
                compar_array1[h_count++] = '{';
                compar_array1[h_count] = '\0';
                break;
            
            case '[' :
                compar_array1[h_count++] = '[';
                compar_array1[h_count] = '\0';
                break;
            
            case '(' :
                compar_array1[h_count++] = '(';
                compar_array1[h_count] = '\0';
                break;
            
            case '}' :
                if(--h_count < 0 || compar_array1[h_count] != '{'  )
                    return false;
                
                compar_array1[h_count] = '\0';
                break;
            
            case ']' :
                if(--h_count < 0 || compar_array1[h_count] != '[')
                    return false;
            
                compar_array1[h_count] = '\0';
                break;
            
            case ')' :
                if(--h_count < 0 || compar_array1[h_count] != '(')
                    return false;
                compar_array1[h_count] = '\0';
                break;
        }
        
        switch(s[tail--]){
            case '}' :
                compar_array2[t_count++] = '}';
                compar_array2[t_count] = '\0';
                break;
            
            case ']' :
                compar_array2[t_count++] = ']';
                compar_array2[t_count] = '\0';
                break;
            
            case ')' :
                compar_array2[t_count++] = ')';
                compar_array2[t_count] = '\0';
                break;
            
            case '{' :
                 if(--t_count < 0 || compar_array2[t_count] != '}')
                    return false;
                
                compar_array2[t_count] = '\0';
                break;
            
            case '[' :
                if(--t_count < 0 || compar_array2[t_count] != ']')
                    return false;
                
                compar_array2[t_count] = '\0';
                break;
            
            case '(' :
                if(--t_count < 0 || compar_array2[t_count] != ')')
                    return false;
                
                compar_array2[t_count] = '\0';
                break;
        }
       

       
        
        
    }
         
    for(int i = 0; i < length/2; i++){
        if(compar_array1[i] == '\0' && compar_array2[i] == '\0')
            return true;
        
        switch(compar_array2[i]){
            case '}' :
                compar_array2[i] = '{';
                break;
            case ']' :
                compar_array2[i] = '[';
                break;
            case ')' :
                compar_array2[i] = '(';
                break;
        }
        
        if(compar_array1[i] != compar_array2[i])
            return false;
    }
     
    
    
    return true;
}


/****網路參考****/
// bool isValid(char * s){
//     size_t s_len = strlen(s);
//     size_t stack_size = 0;
//     char *stack = (char *)malloc(s_len * sizeof(char));
//     for (int i = 0; i < s_len; i++)
//     {
//         char c = s[i];
//         if (c == '(' || c == '[' || c == '{')
//         {
//             // push onto the stack
//             stack[stack_size++] = c;
//             if (stack_size > s_len / 2) return false;
//         }
//         else
//         {
//             // pop from the stack
//             if (stack_size == 0) return false;
//             switch (c)
//             {
//                 case ')':
//                     if (stack[--stack_size] != '(')
//                     {
//                         return false;
//                     }
//                     break;
//                 case ']':
//                     if (stack[--stack_size] != '[')
//                     {
//                         return false;
//                     }
//                     break;
//                 default:
//                     if (stack[--stack_size] != '{')
//                     {
//                         return false;
//                     }
//                     break;
//             }
//         }
//     }
    
//     free(stack);
    
//     return (stack_size == 0);
// }
