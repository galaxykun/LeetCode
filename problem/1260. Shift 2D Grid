

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */


int** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes){
    
    int total_len = gridSize * (*gridColSize);
    k = k % total_len;
    int curr_grid = total_len - k;
    int curr_res = 0;
    *returnSize = gridSize;
    *returnColumnSizes = gridColSize;
    
    //m = gridSize, n = *gridColSize
    //一個指標指向一個m*n長度的記憶體空間，當result++則會直接跳過一個n的長度
    /*int (*result)[*gridColSize] = 
        (int(*)[*gridColSize])calloc(gridSize * (*gridColSize),sizeof(int));*/
    //一個連續的記憶體空間大小為m*n，使用for去malloc會是破碎的記憶體空間
    //這兩種二維陣列有本質上的不同是不能混用，即是上面那種跟**prt是不能不相等的
    int **result, *tmp;  
    result = (int**)calloc( gridSize , sizeof(int *) ); 
    tmp = (int*)calloc( gridSize * (*gridColSize) , sizeof(int) ); 
    for(int i = 0; i < gridSize; tmp += *gridColSize, i++)
        result[i] = tmp;
    
    for(int i = 0; i < total_len; i++, curr_grid++, curr_res++){
        if(curr_grid == total_len)
            curr_grid = 0;
                                                                     
        result[curr_res / *gridColSize][curr_res % *gridColSize] = 
            grid[curr_grid / *gridColSize][curr_grid % *gridColSize];
    }
    
    
    return result;
}
