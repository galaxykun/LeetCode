

int minDominoRotations(int* tops, int topsSize, int* bottoms, int bottomsSize){
    int max[2][2] = {0}, count[6][2] = {0};
    int choose = 0;
    
    for(int i = 0; i < topsSize; i++){
        count[tops[i]-1][0]++;
        count[bottoms[i]-1][1]++;
        
        if(count[tops[i]-1][0] > max[0][1]){
            max[0][0] = tops[i]-1;
            max[0][1] = count[tops[i]-1][0];
        }
        if(count[bottoms[i]-1][1] > max[1][1]){
            max[1][0] = bottoms[i]-1;
            max[1][1] = count[bottoms[i]-1][1];
        }
    }
    if(max[0][1] == topsSize || max[1][1] == topsSize)
        return 0;
    if(max[0][1] < max[1][1])
        choose = 1;
    else if(max[0][1] == max[1][1]){
        int temp = 0;
        if(count[max[0][0]][1] == (topsSize - max[0][1])){
            choose = 0;
        }
        else if(count[max[1][0]][0] == (topsSize - max[1][1])){
            choose = 1;
        }
        else{
            return -1;
        } 
    }
    
    if(max[choose][1] < topsSize/2)
        return -1;
    
    for(int i = 0; i < topsSize; i++){printf(">%d\n",max[choose][0]);
        if(tops[i] != max[choose][0]+1 && bottoms[i] != max[choose][0]+1)
            return -1;
    }
    
   return topsSize - max[choose][1]; 
} 
    

// for(int i = 0; i < 6; i++)
//     printf("%d ",count[i][0]);
//     printf("\n");
// for(int i = 0; i < 6; i++)
//     printf("%d ",count[i][1]);
//     printf("\n");
// for(int i = 0; i < 2; i++)
//     printf("%d ",max[0][i]);
//     printf("\n");
// for(int i = 0; i < 2; i++)
//     printf("%d ",max[1][i]);
//     printf("\n");



/****網路參考****/
// int minDominoRotations(int* tops, int topsSize, int* bottoms, int bottomsSize){
//     int minimunRotation[4] = {0};
//     minimunRotation[1] = 1;
//     minimunRotation[3] = 1;
//     for(int index = 1; index < topsSize; index++) {
        
//         if (tops[0] != tops[index]  && tops[0] != bottoms[index]) {
//             minimunRotation[0] = -1;
//             minimunRotation[1] = -1;
//         }
//         if (minimunRotation[0] != -1 && tops[0] != tops[index])
//             minimunRotation[0] += 1;
//         if (minimunRotation[1] != -1 && tops[0] != bottoms[index])
//             minimunRotation[1] += 1;
        
//         if (bottoms[0] != tops[index]  && bottoms[0] != bottoms[index]) {
//             minimunRotation[2] = -1;
//             minimunRotation[3] = -1;
//         }
//         if (minimunRotation[2] != -1 && bottoms[0] != bottoms[index])
//             minimunRotation[2] += 1;
//         if (minimunRotation[3] != -1 && bottoms[0] != tops[index])
//             minimunRotation[3] += 1;
       
//         if (minimunRotation[0] == -1 &&  minimunRotation[1] == -1 && minimunRotation[2] == -1 &&  minimunRotation[3] == -1)
//             return -1;
//     }
   
//     int ret = topsSize;
//     for(int i = 0 ; i < 4; i++) {
//         if (minimunRotation[i] != -1 && ret > minimunRotation[i]) 
//             ret = minimunRotation[i];
//     }
    
//     return ret;
    
// }
