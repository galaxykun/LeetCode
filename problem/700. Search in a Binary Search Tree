/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

//struct TreeNode* result;

// bool searchval(int val, struct TreeNode* curr){
//     if(!curr || result)
//         return;
    
//     if(curr->val == val){
//         result = curr;
//         return;
//     }

//     searchval(val, curr->left);
//     searchval(val, curr->right);

    
//     return;
// }

// struct TreeNode* searchBST(struct TreeNode* root, int val){
//     result = NULL;
//     searchval(val, root);

    
//     return result;

// }

/************/
//struct TreeNode* result;
// bool searchval(int val, struct TreeNode* curr){
//     if(!curr || result)
//         return;
    
//     if(curr->val == val){
//         result = curr;
//         return;
//     }

//     if(val < curr->val)
//         searchval(val, curr->left);
//     else
//         searchval(val, curr->right);

    
//     return;
// }

// struct TreeNode* searchBST(struct TreeNode* root, int val){
//     result = NULL;
    
//     if(root->val == val){
//         result = root;
//         return result;
//     }
    
//     if(val < root->val)
//         searchval(val, root->left);
//     else
//         searchval(val, root->right);
    
    
//     return result;
// }

/************/
struct TreeNode* searchBST(struct TreeNode* root, int val){
    
    if(!root || root->val == val){
        return root;
    }
    
    if(val < root->val)
        return searchBST(root->left, val);
    else
        return searchBST(root->right, val);
}

/****other people's do****/
// struct TreeNode* searchBST(struct TreeNode *root, int val) {
//     struct TreeNode *p = root;
//     while (p != NULL && p->val != val) {
//         if (p->val > val) {
//             p = p->left;
//         } else {
//             p = p->right;
//         }
//     }
//     return p;
// }
