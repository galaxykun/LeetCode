/**
 * 使用一個新的list來存l1+l2的值
 * 頭部需要特別處裡
 */
 
 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    
    struct ListNode *newlist;
    struct ListNode *head;
    
    //改名子方便後續malloc
    typedef struct ListNode Node;
    
    newlist = (Node *)malloc(sizeof(Node));
    newlist->next = NULL;
    newlist->val = 0;
    
    head = (Node *)malloc(sizeof(Node));
    
    //各只有一點時
    if(l1->next != NULL || l2->next != NULL)
        head->next = newlist;
    else
        head->next = NULL;
    //頭部處理
    head->val = l1->val + l2->val;
    //第一個點相加要進位時處理
    if(head->val >= 10){
        head->next = newlist;
        head->val -= 10;
        newlist->val += 1;
    }
    
    //還有點就會進迴圈
    while(l1->next != NULL || l2->next != NULL){

        //如果某條list不能走時處理
        if(l1->next != NULL && l2->next != NULL){
            newlist->val += l1->next->val + l2->next->val;
            l1 = l1->next;
            l2 = l2->next;
        }
        else if(l1->next != NULL){
            newlist->val += l1->next->val;
            l1 = l1->next;
        }
        else if(l2->next != NULL){
            newlist->val += l2->next->val;
            l2 = l2->next;
        }
        
        //新增空間給下一個合使用
        struct ListNode *temp = (Node *)malloc(sizeof(Node));
        temp->next = NULL;
        temp->val = 0;
        
        //進位時處理
        if(newlist->val >= 10){
            newlist->val -= 10;
            temp->val += 1;
        }
        //都不能走時
        if(l1->next == NULL && l2->next == NULL)
            if(temp->val == 0)
                break;
        
        newlist->next = temp;
        newlist = temp;
    }
  
    return head;
}

/****網路參考****/
//     struct ListNode temp;
//     temp.val = 0; temp.next = NULL;
//     struct ListNode* curr = &temp;
//     int remainder = 0, sum;
//     while (l1 != NULL || l2 != NULL || remainder != 0) {
//         sum = remainder + (l1 == 0 ? 0 : l1->val) + (l2 == 0 ? 0: l2->val);
//         remainder = sum/10;
//         sum %= 10;
//         curr->next = malloc(sizeof(struct ListNode));
//         curr->next->next = NULL;
//         curr->next->val = sum;
//         curr = curr->next;
//         l1 = (l1 == 0 ? 0 : l1->next);
//         l2 = (l2 == 0 ? 0 : l2->next);
//     }
//     return temp.next;
// }
