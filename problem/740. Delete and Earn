//自己使用遞迴超時

// int MAX(int (*table)[3], int curr, int numsSize){
//     if(table[curr][0] == 0 || curr >= numsSize)
//         return 0;
    
//     int sum = table[curr][1];
//     int index = curr;
//     table[index][2] = sum;                                                 
    
//     if(curr+1 < numsSize && table[curr][0]+1 == table[curr+1][0])
//         curr++;
//     for(int i = curr+1; i < numsSize; i++){
//         if(table[i][0] == 0)
//             break;

//         int temp = 0;
//         temp = sum + MAX(table, i, numsSize);//printf("%d %d %d\n",table[i][0],sum,table[i][2]);
//         if(table[index][2] < temp)
//             table[index][2] = temp;
//     }

//     return table[index][2];
// }


// int cmp ( const void *a , const void *b ){
//     return *(int *)a - *(int *)b;
// }

// int deleteAndEarn(int* nums, int numsSize){
//     if(numsSize == 1)
//         return nums[0];
        
//     int ans = 0;
//     int table[numsSize][3];
//     memset(table, 0, sizeof(table));
    
//     qsort(nums, numsSize, sizeof(nums[0]), cmp);
    


//     for(int i = 0; i < numsSize; i++){
//             for(int j = 0; j < numsSize; j++){
//                 if(table[j][0] == 0){
//                     table[j][0] = nums[i];
//                     table[j][1] += nums[i];
//                     break;
//                 }
//                 else if(table[j][0] == nums[i]){
//                     table[j][1] += nums[i];
//                     break;
//                 }
//             }
//         }
//      for(int i=0;i<numsSize;i++)
// printf("%d ",nums[i]);
// printf("\n");  
//         for(int i=0;i<numsSize;i++)
// printf("%d ",table[i][0]);
// printf("\n"); 
// //         for(int i=0;i<numsSize;i++)
// // printf("%d ",table[i][1]);
// // printf("\n"); 
     
    
//     MAX(&table, 0, numsSize);
//     if(table[0][0]+1 == table[1][0])
//         MAX(&table, 1, numsSize);
   
//     for(int i=0;i<numsSize;i++)
// printf("%d ",table[i][2]);
// printf("\n");


//     for(int i = 0; i < numsSize; i++){
//         if(table[i][2] > ans)
//             ans = table[i][2];
//     }
    
//     return ans;
// }

/****網路參考****/
//基本上看奇數或是偶數相加誰大，每次跟上一個比較發現比較大時就等於其一個，就是前一段應該要選相反的，最後就會是最大的答案
int datas[10005];
int deleteAndEarn(int* nums, int numsSize) {
    memset(datas, 0, sizeof(datas));
    int maxn = 0;
    for(int i = 0; i < numsSize; i++){
        datas[nums[i]] ++;
        if(nums[i] > maxn)
            maxn = nums[i];
    }
    for(int i = 2; i <= maxn; i++){
        datas[i] = i * datas[i] + datas[i-2];
        if(datas[i-1] > datas[i])
            datas[i] = datas[i-1];
    }
    return datas[maxn];
}
