/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
// struct TreeNode* newBST(struct TreeNode* curr, struct TreeNode* result){
//     if(!curr)
//         return result;
    
//     result = newBST(curr->left, result);
//     result->right = malloc(sizeof(struct TreeNode));
//     result = result->right;
//     result->val = curr->val;
//     result->left = NULL;
//     result->right = NULL;
//     result = newBST(curr->right, result);
    
    
//     return result;
// }

// void freeBST(struct TreeNode* root){
//     if(!root)
//         return;
    
//     freeBST(root->left);
//     freeBST(root->right);
//     free(root);
//     root = NULL;
    
    
//     return;
// }

// struct TreeNode* increasingBST(struct TreeNode* root){
//     struct TreeNode* result = malloc(sizeof(struct TreeNode));
//     result->val = 0;
//     result->left = NULL;
//     result->right = NULL;
//     newBST(root, result);
    
//     struct TreeNode* temp = result;
//     result = result->right;
//     free(temp);
//     freeBST(root);
    
    
//     return result;
// }


/****other people's do****/
void dfs(struct TreeNode* root, struct TreeNode** cur) {
    if (root == NULL) return;

    dfs(root->left, cur);

    // In-order
    root->left    = NULL;
    (*cur)->right = root;
    (*cur)        = root;

    dfs(root->right, cur);
}

struct TreeNode* increasingBST(struct TreeNode* root) {
    struct TreeNode   ans = {};
    struct TreeNode** cur = &ans;
    
    dfs(root, &cur);
    
    return ans.right;    
}

// struct TreeNode* increasingBST(struct TreeNode* root) {
//     if(root==NULL)
//         return NULL;
//     if(root->left==NULL)
//     {
//         root->right = increasingBST(root->right);
//         return root;
//     }
//     else
//     {
//         struct TreeNode* temp = root;
//         struct TreeNode* pre;
//         while(root->left!=NULL)
//         {
//             pre = root;
//             root = root->left;
//         }
//         if(root->right!=NULL)
//             pre->left = root->right;
//         else
//             pre->left = NULL;

//         root->right = increasingBST(temp);
//         return root;
//     }
// }
