
//from (0 0s), (0 1s) to (m 0s), (n 1s)
#define max(a, b) ((a) > (b) ? (a) : (b))

int findMaxForm(char ** strs, int strsSize, int m, int n){
    int dp[m + 1][n + 1];
    memset(dp, 0, sizeof(dp));
    
    for(int i = 0; i < strsSize; i++){
        int one = 0, zero = 0;
        for(int j = 0; j < strlen(strs[i]); j++){
            if(strs[i][j] == '0')
                zero++;
            else
                one++;
        }
        
        if(zero > m || one > n)
            continue;
        
        for(int i = m; i >= zero; i--){
            for(int j = n; j >= one; j--){
                dp[i][j] = max(dp[i][j], dp[i - zero][j - one] + 1);
            }
        }
    }
    
    
    return dp[m][n];
}

/****other's do****/
// int* countFunc(char* s){
//     int* ret=(int*)calloc(2,sizeof(int));
//     for(int i=0;i<strlen(s);i++){
//         ret[s[i]-'0']++;
//     }
//     return ret;
// }
// int max(int a,int b){
//     return a>b?a:b;
// }
// int findMaxForm(char** strs, int strsSize, int m, int n) {
//     int** dp=(int**)malloc((m+1)*sizeof(int*));
//     for(int i=0;i<m+1;i++){
//         dp[i]=(int*)calloc(n+1,sizeof(int));
//     }
//     dp[0][0]=0;
//     for(int k=0;k<strsSize;k++){
//         int* temp=countFunc(strs[k]);
//         for(int i=temp[0]; i <= m; i++) {
//             for(int j=temp[1]; j<=n; j++) {
//                 dp[i][j] = max(dp[i][j], dp[i-temp[0]][j-temp[1]]+1);
//             }
//         }
//         free(temp);
//     }
//     return dp[m][n];
// }
