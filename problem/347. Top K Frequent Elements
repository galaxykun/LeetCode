

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int cmp(const int* a, const int* b){
    return *(int*)a - *(int*)b;
}

int cmp1(const int* a, const int* b){
    return *(int*)a < *(int*)b;
}


int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
    qsort(nums, numsSize, sizeof(int), cmp);
    
    *returnSize = k;
    //int (*count)[2] = (int(*)[2])calloc(100000 * 2, sizeof(int));
    int count[100000][2] = {0};
    
    count[0][0]++;
    count[0][1] = nums[0];
    for(int i = 1, j = 0; i < numsSize; i++){
        if(count[j][1] != nums[i]){
            count[++j][0]++;
            count[j][1] = nums[i];
        }
        else{
            count[j][0]++;
        }
    }
    
    qsort(count, 100000, sizeof(count[0]), cmp1);
    
    int *result = (int*)calloc(k,sizeof(int));
    for(int i = 0; i < k; i++){
        result[i] = count[i][1];
    } 
    
    /**returnSize = k;
    int count[200001][2] = {0};
    
    count[nums[0] + 100000][0]++;
    count[nums[0] + 100000][1] = nums[0];
    for(int i = 1, j = 0; i < numsSize; i++){
        count[nums[i] + 100000][0]++;
        count[nums[i] + 100000][1] = nums[i];
    }
   
    qsort(count, 200001, sizeof(count[0]), cmp1);
    
    int *result = (int*)calloc(k,sizeof(int));
    for(int i = 0; i < k; i++){
        result[i] = count[i][1];
    }*/
    
    
    return result;
}

/****other people's do****/
//using uthash.h hashtable

// First get the count of elements using a hash map (using hashmap as there are negative numbers involved in input array).

// Since different elements can have same count, we need to note down the count to indexes map where indexes are the elements having same count. At max we can have numsSize map elements considering the worst case where each element occur one time in the input array. Allocate a separate array and note down this map
// Note: we need numsSize + 1 elements in frequency array. For test [1] k = 1.

// Form the result upto k elements from backwards of frequency array

// Time and Space: O(N), where N is the size of the input array


// #define MAX_NUMS    10000
// #define MAX_INDEX   500

// typedef struct {
//     int indexes[MAX_INDEX];     // index in count array is the value
//     int numIndex;
// } pair;

// typedef struct {
//     int elem;
//     int count;
//     UT_hash_handle hh;
// } hElem;

// int* topKFrequent(int* nums, int numsSize, int k, int* returnSize){
//     hElem *count = NULL, *s, *cur;
//     pair *freq = calloc(sizeof(pair), (numsSize + 1));
//     int *res = malloc(sizeof(int) * k);
    
//     *returnSize = 0;
    
//     // get the count of each element
//     for(int i = 0; i < numsSize; i++) {
//         HASH_FIND_INT(count, &nums[i], s);
//         if(s) 
//             s->count ++;
//         else {
//             s = malloc(sizeof(hElem));
//             s->elem = nums[i];
//             s->count = 1;
//             HASH_ADD_INT(count, elem, s);
//         }
            
//     }
        
//     // note down the frequencies of each element (index)
//     HASH_ITER(hh, count, cur, s)
//         freq[cur->count].indexes[freq[cur->count].numIndex++] = cur->elem;
    
//     // build the result for k top elements
//     for(int i = numsSize; i >= 0; i--) {
//         if(freq[i].numIndex > 0) {
//             for(int j = 0; j < freq[i].numIndex; j++) {
//                 res[(*returnSize)++] = freq[i].indexes[j];
//                     if(*returnSize == k)
//                     return res;
//             }
//         }
            
//     }
//     return res;
// }
