


int cmp(const int **a, const int **b){
    int A = 0, B = 0;
    
    if((a[0][0]) - (a[0][1]) >= (a[0][1]) - (a[0][0]))
        A = (a[0][0]) - (a[0][1]);
    else
        A = (a[0][1]) - (a[0][0]);
        
    if((b[0][0]) - (b[0][1]) >= (b[0][1]) - (b[0][0]))
        B = (b[0][0]) - (b[0][1]);
    else
        B = (b[0][1]) - (b[0][0]);
    
    return A < B;
}

int twoCitySchedCost(int** costs, int costsSize, int* costsColSize){

    qsort(costs, costsSize, sizeof(costs[0]), cmp);
    
    int an = costsSize/2, bn = costsSize/2;
    int result = 0;
    
    for(int i = 0; i < costsSize; i++){
        if(!an){
            result += costs[i][1];
            bn--;
            continue;
        }
        if(!bn){
            result += costs[i][0];
            an--;
            continue;
        }
        
        if(costs[i][0] < costs[i][1]){
            result += costs[i][0];
            an--;
        }
        else{
            result += costs[i][1];
            bn--;
        }
    }

    return result;
}

/****other people's do****/
// int cmpfunc (const void * a, const void * b) {
//    return ( *(int*)a - *(int*)b );
// }

// int twoCitySchedCost(int** costs, int costsSize, int* costsColSize){
//     int i,j,D[costsSize],sum=0;
//     for(i=0; i<costsSize; i++){
//         sum += costs[i][0];
//         D[i] = costs[i][1]-costs[i][0];
//     }
    
//     qsort(D, costsSize, sizeof(int), cmpfunc);
    
//     for(i=0; i<costsSize/2; i++)
//         sum += D[i];
    
//     return sum;
// }
