

//https://www.youtube.com/watch?v=vIJ8ue4pQtw
bool isOK(int **h, int **map, int row, int col, int rowSize, int colSize, int target){
    map[row][col] = 1;
    
    if(col == colSize - 1 && row == rowSize - 1)
        return true;
    
    if(col + 1 < colSize && !map[row][col + 1] && abs(h[row][col] - h[row][col + 1]) <= target){
        if(isOK(h, map, row, col + 1, rowSize, colSize, target))
            return true;
    }
    
    if(col - 1 >= 0 && !map[row][col - 1] && abs(h[row][col] - h[row][col - 1]) <= target){
        if(isOK(h, map, row, col - 1, rowSize, colSize, target))
            return true;
    }
    
    if(row + 1 < rowSize && !map[row + 1][col] && abs(h[row][col] - h[row + 1][col]) <= target){
        if(isOK(h, map, row + 1, col, rowSize, colSize, target))
            return true;
    }
    
    if(row - 1 >= 0 && !map[row - 1][col] && abs(h[row][col] - h[row - 1][col]) <= target){
        if(isOK(h, map, row - 1, col, rowSize, colSize, target))
            return true;
    }
    
    
    return false;
}

int minimumEffortPath(int** heights, int heightsSize, int* heightsColSize){
    int left = 0;
    int right = 1000000;
    
    //creat map;
    int **map;
    int *temp;
    map = (int**)calloc(heightsSize, sizeof(int*));
    temp = (int*)calloc(heightsSize * (*heightsColSize), sizeof(int));
    for(int i = 0; i < heightsSize; i++, temp += (*heightsColSize)){
        map[i] = temp;
    }
    
    //binary search + DFS
    int mid = 0;
    while(left <= right){
        mid = (left + right) / 2;
        
        if(isOK(heights, map, 0, 0, heightsSize, *heightsColSize, mid)){
            right = mid - 1;
        }
        else{
            left = mid + 1;
        }

        for(int i = 0; i < heightsSize; i++)
            memset(map[i], 0, (*heightsColSize) * sizeof(int)); 
    }
    

    return left;
}

/***********/
// int FindFather(int *father, int a){
//     if(father[a] != a){
//         father[a] = FindFather(father, father[a]);
//     }
    
    
//     return father[a];
// }

// void Union(int *father, int a, int b){
//     a = FindFather(father, father[a]);
//     b = FindFather(father, father[b]);
    
//     father[a] = b;
    
    
//     return;
// }

// int cmp(const int *a, const int *b){
//     return *a > *b;
// }


// int minimumEffortPath(int** heights, int heightsSize, int* heightsColSize){
//     int m = heightsSize;
//     int n = *heightsColSize;
//     if(m == 1 && n == 1)
//         return 0;
    
//     int father[m * n];
//     for(int i = 0; i < m * n; i++){
//         father[i] = i;
//     }
    
//     int temp = (n - 1) * m + (m - 1) * n;
//     int edges[temp][3];
//     temp = 0;
    
//     for(int i = 0; i < m; i++){
//         for(int j = 0; j < n; j++){
//             if(j + 1 < n){
//                 edges[temp][0] = abs(heights[i][j] - heights[i][j + 1]);
//                 edges[temp][1] = i * n + j;
//                 edges[temp][2] = i * n + j + 1;
//                 temp++;
//             }
            
//             if(i + 1 < m){
//                 edges[temp][0] = abs(heights[i][j] - heights[i + 1][j]);
//                 edges[temp][1] = i * n + j;
//                 edges[temp][2] = (i + 1) * n + j;
//                 temp++;
//             }
//         }
//     }
    
//     qsort(edges, temp, sizeof(edges[0]), cmp);
    
//     for(int i = 0; i < temp; i++){
//         if(FindFather(father, edges[i][1]) != FindFather(father, edges[i][2])){
//             Union(father, edges[i][1], edges[i][2]);
//         }
        
//         if(FindFather(father, 0) == FindFather(father, n * m - 1))
//             return edges[i][0];
//     }
    
    
//     return 0;
// }
