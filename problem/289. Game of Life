

int judge(int** board, int row, int col, int rowSize, int colSize){
    
    int count = 0;
    
    if(row){
        if(col && board[row - 1][col - 1]){
            count++;
        }
        if(board[row - 1][col]){
            count++;
        }
        if(col != colSize && board[row - 1][col + 1]){
            count++;
        }
    }
    
    
    if(col && board[row][col - 1]){
        count++;
    }
    
    if(col != colSize && board[row][col + 1]){
        count++;
    }
    
    
    if(row != rowSize){
        if(col && board[row + 1][col - 1]){
            count++;
        }
        if(board[row + 1][col]){
            count++;
        }
        if(col != colSize && board[row + 1][col + 1]){
            count++;
        }
    }
    
    
    return count;
}

void gameOfLife(int** board, int boardSize, int* boardColSize){
    
    int result[boardSize][*boardColSize];
    // int **result = (int**)calloc(boardSize, sizeof(int*));
    // int *index = (int*)calloc(boardSize * (*boardColSize), sizeof(int));
    
    
    for(int i = 0; i < boardSize; i++){
        //, index += *boardColSize
        //result[i] = index;
        
        for(int j = 0; j < *boardColSize; j++){
            int temp = judge(board, i, j, boardSize - 1, (*boardColSize) - 1);
            
            if(temp < 2 || temp > 3){
                result[i][j] = 0;
            }
            else{
                if(temp == 3)
                    result[i][j] = 1;
                else
                    result[i][j] = board[i][j];
            }
        }
    }
    
 
    for(int i = 0; i < boardSize; i++){
        for(int j = 0; j < *boardColSize; j++){
            board[i][j] = result[i][j];
        }
    }
    
    
    return;
}

/****other people's do****/
//https://leetcode.com/problems/game-of-life/discuss/73223/Easiest-JAVA-solution-with-explanation


// int judge(int** board, int row, int col, int rowSize, int colSize){
    
//     int count = 0;
    
//     if(row){
//         if(col && board[row - 1][col - 1]){
//             count += board[row - 1][col - 1] & 1;
//         }
//         if(board[row - 1][col]){
//             count += board[row - 1][col] & 1;
//         }
//         if(col != colSize && board[row - 1][col + 1]){
//             count += board[row - 1][col + 1] & 1;
//         }
//     }
    
    
//     if(col && board[row][col - 1]){
//         count += board[row][col - 1] & 1;
//     }
    
//     if(col != colSize && board[row][col + 1]){
//         count += board[row][col + 1] & 1;
//     }
    
    
//     if(row != rowSize){
//         if(col && board[row + 1][col - 1]){
//             count += board[row + 1][col - 1] & 1;
//         }
//         if(board[row + 1][col]){
//             count += board[row + 1][col] & 1;
//         }
//         if(col != colSize && board[row + 1][col + 1]){
//             count += board[row + 1][col + 1] & 1;
//         }
//     }
    
    
//     return count;
// }

// void gameOfLife(int** board, int boardSize, int* boardColSize){

//     for(int i = 0; i < boardSize; i++){
//         for(int j = 0; j < *boardColSize; j++){
//             int temp = judge(board, i, j, boardSize - 1, (*boardColSize) - 1);
            
//             // In the beginning, every 2nd bit is 0;
//             // So we only need to care about when will the 2nd bit become 1.
//             if (board[i][j] == 1 && temp >= 2 && temp <= 3) {  
//                 board[i][j] = 3; // Make the 2nd bit 1: 01 ---> 11
//             }
//             if (board[i][j] == 0 && temp == 3) {
//                 board[i][j] = 2; // Make the 2nd bit 1: 00 ---> 10
//             }
//         }
//     }
     
    
//     for(int i = 0; i < boardSize; i++){
//         for(int j = 0; j < *boardColSize; j++){
//             board[i][j] >>= 1;
//         }
//     }
    
    
//     return;
// }
